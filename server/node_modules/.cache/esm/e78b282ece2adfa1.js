let bcrypt,jwt,UserModel;_ce2‍.x([["signup",()=>signup]]);_ce2‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_ce2‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_ce2‍.w("../models/user",[["default",["UserModel"],function(v){UserModel=v}]]);




const secret = 'test';

       const signup = async (req, res) => {
    const { email, password, firstName, lastName } = req.body;
    try {
        const oldUser = await UserModel.findOne({ email });
        if (oldUser) {
            return res.status(400).json({ message: "User alread exists" });
        }
        const hashedPassword = await bcrypt.hash(password, 12);
        const result = await UserModel.create({
            email,
            password: hashedPassword,
            name: `${firstName} ${lastName}`,
        });
        const token = jwt.sign({
            email: result.email,
            id: result._id,
        },
            secret, {
            expiresIn: "1h"
        }
        );
        res.status(201).json({ result, token });
    } catch (err) {
        res.status(500).json({ message: "Something went wrong" });
        _ce2‍.g.console.log(err);
    }
};